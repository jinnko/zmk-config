/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * vim:ts=4 sw=4 sts=4 expandtab:
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


#include <dt-bindings/zmk/hid_usage.h>
#include <dt-bindings/zmk/hid_usage_pages.h>
#define C_ALTERNATE_AUDIO_DECREMENT                                                 \
    (ZMK_HID_USAGE(HID_USAGE_CONSUMER, HID_USAGE_CONSUMER_ALTERNATE_AUDIO_DECREMENT))

// key: 87; state: 1 (pressed)
//                       sym: KP_End       (65436), utf8: ''
// key: 87; state: 0 (released)
//                       sym: KP_End       (65436), utf8: ''
// key: 88; state: 1 (pressed)
//                       sym: KP_Down      (65433), utf8: ''
// key: 88; state: 0 (released)
//                       sym: KP_Down      (65433), utf8: ''
// key: 89; state: 1 (pressed)
//                       sym: KP_Next      (65435), utf8: ''
// key: 89; state: 0 (released)
//                       sym: KP_Next      (65435), utf8: ''
// key: 83; state: 1 (pressed)
//                       sym: KP_Left      (65430), utf8: ''
// key: 83; state: 0 (released)
//                       sym: KP_Left      (65430), utf8: ''
// key: 84; state: 1 (pressed)
//                       sym: KP_Begin     (65437), utf8: ''
// key: 84; state: 0 (released)
//                       sym: KP_Begin     (65437), utf8: ''
// key: 85; state: 1 (pressed)
//                       sym: KP_Right     (65432), utf8: ''
// key: 85; state: 0 (released)
//                       sym: KP_Right     (65432), utf8: ''
// key: 79; state: 1 (pressed)
//                       sym: KP_Home      (65429), utf8: ''
// key: 79; state: 0 (released)
//                       sym: KP_Home      (65429), utf8: ''
// key: 80; state: 1 (pressed)
//                       sym: KP_Up        (65431), utf8: ''
// key: 80; state: 0 (released)
//                       sym: KP_Up        (65431), utf8: ''
// key: 81; state: 1 (pressed)
//                       sym: KP_Prior     (65434), utf8: ''
// key: 81; state: 0 (released)
//                       sym: KP_Prior     (65434), utf8: ''
// [14:     wl_keyboard] keymap: format: 1 (xkb v1), size: 66556
// [14:     wl_keyboard] repeat_info: rate: 25 keys/sec; delay: 600 ms
// [14:     wl_keyboard] modifiers: serial: 0; group: 0
//                       depressed: 00000000
//                       latched: 00000000
//                       locked: 00000000
// key: 36; state: 1 (pressed)
// '                     sym: Return       (65293), utf8: '
// key: 36; state: 0 (released)
//                       sym: Return       (65293), utf8: ''
// [14:     wl_keyboard] keymap: format: 1 (xkb v1), size: 66556
// [14:     wl_keyboard] repeat_info: rate: 25 keys/sec; delay: 600 ms
// [14:     wl_keyboard] modifiers: serial: 0; group: 0
//                       depressed: 00000000
//                       latched: 00000000
//                       locked: 00000000
// key: 130; state: 1 (pressed)
//                       sym: Hangul       (65329), utf8: ''
// key: 130; state: 0 (released)
//                       sym: Hangul       (65329), utf8: ''
// key: 101; state: 1 (pressed)
//                       sym: Hiragana_Katakana (65319), utf8: ''
// key: 101; state: 0 (released)
//                       sym: Hiragana_Katakana (65319), utf8: ''
// key: 131; state: 1 (pressed)
//                       sym: Hangul_Hanja (65332), utf8: ''
// key: 131; state: 0 (released)
//                       sym: Hangul_Hanja (65332), utf8: ''
// key: 100; state: 1 (pressed)
//                       sym: Henkan_Mode  (65315), utf8: ''
// key: 100; state: 0 (released)
//                       sym: Henkan_Mode  (65315), utf8: ''
// key: 102; state: 1 (pressed)
//                       sym: Muhenkan     (65314), utf8: ''
// key: 102; state: 0 (released)
//                       sym: Muhenkan     (65314), utf8: ''
// key: 98; state: 1 (pressed)
//                       sym: Katakana     (65318), utf8: ''
// key: 98; state: 0 (released)
//                       sym: Katakana     (65318), utf8: ''
// key: 99; state: 1 (pressed)
//                       sym: Hiragana     (65317), utf8: ''
// key: 99; state: 0 (released)
//                       sym: Hiragana     (65317), utf8: ''
// key: 191; state: 1 (pressed)
//                       sym: XF86Tools    (269025153), utf8: ''
// key: 191; state: 0 (released)
//                       sym: XF86Tools    (269025153), utf8: ''
// key: 192; state: 1 (pressed)
//                       sym: XF86Launch5  (269025093), utf8: ''
// key: 192; state: 0 (released)
//                       sym: XF86Launch5  (269025093), utf8: ''
// [14:     wl_keyboard] keymap: format: 1 (xkb v1), size: 66556
// [14:     wl_keyboard] repeat_info: rate: 25 keys/sec; delay: 600 ms
// [14:     wl_keyboard] modifiers: serial: 0; group: 0
//                       depressed: 00000000
//                       latched: 00000000
//                       locked: 00000000
// key: 36; state: 1 (pressed)
// '                     sym: Return       (65293), utf8: '
// key: 36; state: 0 (released)
//                       sym: Return       (65293), utf8: ''
// [14:     wl_keyboard] keymap: format: 1 (xkb v1), size: 66556
// [14:     wl_keyboard] repeat_info: rate: 25 keys/sec; delay: 600 ms
// [14:     wl_keyboard] modifiers: serial: 0; group: 0
//                       depressed: 00000000
//                       latched: 00000000
//                       locked: 00000000
// key: 194; state: 1 (pressed)
//                       sym: XF86Launch7  (269025095), utf8: ''
// key: 194; state: 0 (released)
//                       sym: XF86Launch7  (269025095), utf8: ''
// key: 195; state: 1 (pressed)
//                       sym: XF86Launch8  (269025096), utf8: ''
// key: 195; state: 0 (released)
//                       sym: XF86Launch8  (269025096), utf8: ''
// key: 196; state: 1 (pressed)
//                       sym: XF86Launch9  (269025097), utf8: ''
// key: 196; state: 0 (released)
//                       sym: XF86Launch9  (269025097), utf8: ''
// key: 199; state: 1 (pressed)
//                       sym: XF86TouchpadToggle (269025193), utf8: ''
// key: 199; state: 0 (released)
//                       sym: XF86TouchpadToggle (269025193), utf8: ''
// key: 200; state: 1 (pressed)
//                       sym: XF86TouchpadOn (269025200), utf8: ''
// key: 200; state: 0 (released)
//                       sym: XF86TouchpadOn (269025200), utf8: ''
// key: 201; state: 1 (pressed)
//                       sym: XF86TouchpadOff (269025201), utf8: ''
// key: 201; state: 0 (released)
//                       sym: XF86TouchpadOff (269025201), utf8: ''
// key: 77; state: 1 (pressed)
//                       sym: Num_Lock     (65407), utf8: ''
// [14:     wl_keyboard] modifiers: serial: 0; group: 16
//                       depressed: 00000010: Mod2 
//                       latched: 00000000
//                       locked: 00000010: Mod2 
// key: 77; state: 0 (released)
//                       sym: Num_Lock     (65407), utf8: ''
// [14:     wl_keyboard] modifiers: serial: 0; group: 16
//                       depressed: 00000000
//                       latched: 00000000
//                       locked: 00000010: Mod2 
// key: 406; state: 1 (pressed)
//                       sym: NoSymbol     (0), utf8: ''
// key: 406; state: 0 (released)
//                       sym: NoSymbol     (0), utf8: ''
// key: 407; state: 1 (pressed)
//                       sym: NoSymbol     (0), utf8: ''
// key: 407; state: 0 (released)
//                       sym: NoSymbol     (0), utf8: ''

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
              &kp KP_N7   &kp KP_N8  &kp KP_N9
              &kp KP_N4   &kp KP_N5  &kp KP_N6
              &kp KP_N1   &kp KP_N2  &kp KP_N3
              &kp F20     &mo 2      &mo 1
            >;

             sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

         nav_layer {
             bindings = <
                 &kp LANG4    &kp F13       &kp F14
                 &kp INT4     &kp INT5      &kp LANG3
                 &kp LANG1    &kp INT2      &kp LANG2
                 &kp C_MUTE   &out OUT_BLE  &trans
             >;

            sensor-bindings = <&inc_dec_kp C_ALTERNATE_AUDIO_INCREMENT C_ALTERNATE_AUDIO_DECREMENT>;
         };

         third_layer {
            //
            //
            // XF86Launch7 XF86Launch8 XF86Launch9
             bindings = <
                 &kp KP_NUMLOCK   &kp C_RED    &kp C_GREEN
                 &kp F21          &kp F22      &kp F23
                 &kp F16          &kp F17      &kp F18
                 &kp K_MUTE2      &trans       &trans
             >;

            sensor-bindings = <&inc_dec_kp K_VOL_UP2 K_VOL_DN2>;
         };

    };
};
